#include"cppdefs.h"
!-----------------------------------------------------------------------
!BOP
!
! !ROUTINE: Initialise BFM variables
!
! !INTERFACE:
   subroutine init_var_bfm(namlst,fname,unit,setup)
!
! !DESCRIPTION:
!  Allocate BFM variables and give initial values of
!  parameters and state variables
!  Only pelagic variables are initialized here.
!  Benthic variables are done in a special routine init_benthic_bfm
!
! !USES:
#ifndef NOT_STANDALONE
   use api_bfm
   use global_mem
#endif
#ifdef BFM_GOTM
   use bio_var
   use bio_bfm
   use global_mem, ONLY: RLEN,ZERO,ONE
#endif
   use mem
   use mem_Phyto, ONLY: p_qnRc,p_qpRc,p_qsRc
   use constants, ONLY: HOURS_PER_DAY
   use mem_Param, ONLY: CalcPelagicFlag,CalcBenthicFlag,p_small,p_qchlc, &
                        CalcPhytoPlankton,CalcMicroZooPlankton,          &
                        CalcMesoZooPlankton,CalcPelChemistry,CalcBacteria
#ifdef INCLUDE_BEN
   use mem_Param, ONLY: CalcBenOrganisms, CalcBenBacteria, CalcBacteria
   use mem_BenBac, ONLY: p_qnc,p_qpc
#endif
   use mem_Param, ONLY: AssignPelBenFluxesInBFMFlag
   use string_functions, ONLY: getseq_number,empty
#ifdef INCLUDE_PELFE
   use mem_Phyto, ONLY: p_qfRc
#endif
   IMPLICIT NONE
!
! !INPUT PARAMETERS:
   integer,          intent(in)        :: namlst
   character(len=*), intent(in)        :: fname
   integer,          intent(in)        :: unit
   integer,          intent(in)        :: setup

!
! !REVISION HISTORY:
!  Original author(s): Marcello Vichi
!
! !LOCAL VARIABLES:
   integer              :: icontrol,i,j,iiLastElement,n
   integer,parameter    :: NSAVE=120  ! Maximum no variables which can be saved
   character(len=64),dimension(NSAVE):: var_save
   character(len=64),dimension(NSAVE):: ave_save

!-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
! Definition of Initial Pelagic (D3) state variables
!-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

%3d-state-Initpp

   namelist /bfm_init_nml/ surface_flux_method,       &
                           bottom_flux_method,        &
                           n_surface_fluxes, InitVar

   namelist /bfm_save_nml/ var_save, ave_save

   interface
      subroutine init_constituents(c,n,p,s,l,f,nc,pc,sc,lc,fc)
         use global_mem, only: RLEN
         real(RLEN),dimension(:),intent(in)             :: c
         real(RLEN),intent(in),optional                 :: nc,pc,sc,lc,fc
         real(RLEN),dimension(:),intent(inout),optional :: n,p,s,l,f
      end subroutine init_constituents
   end interface
! COPYING
!
!   Copyright (C) 2006 P. Ruardij and Marcello Vichi
!   (rua@nioz.nl, vichi@bo.ingv.it)
!
!   This program is free software; you can redistribute it and/or modify
!   it under the terms of the GNU General Public License as published by
!   the Free Software Foundation;
!   This program is distributed in the hope that it will be useful,
!   but WITHOUT ANY WARRANTY; without even the implied warranty of
!   MERCHANTEABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!   GNU General Public License for more details.
!EOP
!-----------------------------------------------------------------------
!BOC

   LEVEL2 'init_var_bfm'
   !---------------------------------------------
   ! Give zero initial values
   ! Overwritten by namelist parameters
   !---------------------------------------------
   surface_flux_method = -1
   bottom_flux_method = 0
   n_surface_fluxes = 1

   !---------------------------------------------
   ! Pelagic variables
   !---------------------------------------------

%3d-state-InitDefault

   !---------------------------------------------
   ! Initialize the structured array that 
   ! defines if a variable is initialized with 
   ! data. The namelist values override the
   ! assignment
   !---------------------------------------------
   InitVar = InputInfo(0,"dummy.nc","dummy",ZERO,ZERO,ZERO,ZERO,.FALSE.,.FALSE.,.FALSE.)

   !---------------------------------------------
   ! Open and read the namelist
   !---------------------------------------------
   icontrol=0
   open(namlst,file=fname,action='read',status='old',err=98)
   read(namlst,nml=bfm_init_nml,err=99)
   var_save=""
   ave_save=""
   var_ave=.false.
   read(namlst,nml=bfm_save_nml,err=100)
   close(namlst)
   icontrol=1
98 if ( icontrol == 0 ) then
     LEVEL3 'I could not open ',trim(fname)
     LEVEL3 'The initial values of the BFM variables are set to ONE'
     LEVEL3 'If thats not what you want you have to supply ',trim(fname)
   end if

   !---------------------------------------------
   ! Check variable to be saved and
   ! set the corresponding flag value in var_ids
   !---------------------------------------------
   do i=1,NSAVE
      if (.NOT.empty(var_save(i))) then
            j=getseq_number(var_save(i),var_names,stBenFluxE,.TRUE.)
            if ( j > 0 ) var_ids(j)=-1
      end if
      if ( .NOT.empty(var_save(i)) .AND. j==0 ) then
            STDERR 'Warning: variable ',trim(var_save(i)),' does not exist!'
      end if
   end do
   do i=1,NSAVE
      if (.NOT.empty(ave_save(i))) then
         j=getseq_number(ave_save(i),var_names,stBenFluxE,.TRUE.)
         if ( .NOT.empty(ave_save(i)) .AND. j==0 ) then
            STDERR 'Warning: variable ',trim(ave_save(i)),' does not exist!'
         else if ( var_ids(j) <0 ) then
            STDERR 'Warning: Variable ',trim(ave_save(i)), &
               ' is already selected for output in var_save'
         else if ( j > 0 ) then
            var_ids(j) = -1
            var_ave(j) = .true.
            ave_ctl = .true.
         end if
      end if
   end do

#ifdef BFM_GOTM
   !---------------------------------------------
   ! Create pointers
   !---------------------------------------------
    call pointers_gotm_bfm()
#endif

   !---------------------------------------------
   ! Initialize BFM parameters
   !---------------------------------------------
   call Initialize

   !---------------------------------------------
   ! Initially set the number of sun hours
   ! equal to the number of hours in a day.
   !---------------------------------------------
   SUNQ = HOURS_PER_DAY

   !---------------------------------------------
   ! Initialise pelagic state variables
   ! also if using a benthic-only setup
   ! (for boundary conditions)
   !---------------------------------------------

%3d-state-InitSets

      !---------------------------------------------
      ! Initialise other internal components
      ! with Redfield
      !---------------------------------------------
      do i = 1 , ( iiPhytoPlankton)
         call init_constituents(c=PhytoPlankton(i,iiC),      &
                        n=D3STATE(ppPhytoPlankton(i,iiN),:), &
                        p=D3STATE(ppPhytoPlankton(i,iiP),:), &
                        l=D3STATE(ppPhytoPlankton(i,iiL),:), &
                        lc=p_qchlc(i), nc=p_qnRc(i), pc=p_qpRc(i))
         if (ppPhytoPlankton(i,iiS)>0)                          &
            call init_constituents(c=PhytoPlankton(i,iiC),      &
                           s=D3STATE(ppPhytoPlankton(i,iiS),:), &
                           sc=p_qsRc(i))
#ifdef INCLUDE_PELFE
         if (ppPhytoPlankton(i,iiF)>0)                          &
            call init_constituents(c=PhytoPlankton(i,iiC),      &
                           f=D3STATE(ppPhytoPlankton(i,iiF),:), &
                           fc=p_qfRc(i))
#endif
      end do
      
      ! Initialise bacteria components 
      call init_constituents(c=B1c,n=B1n,p=B1p)
      call init_constituents(c=R1c,n=R1n,p=R1p)
#ifdef INCLUDE_PELFE
      call init_constituents(c=R6c,n=R6n,p=R6p,s=R6s,f=R6f)
#else
      call init_constituents(c=R6c,n=R6n,p=R6p,s=R6s)
#endif

      ! Initialise zooplankton components checking for fixed-quota
      do i = 1 , ( iiMicroZooPlankton)
         if ( (ppMicroZooPlankton(i,iiP)>0) .and. (ppMicroZooPlankton(i,iiN)>0) ) &
            call init_constituents(c=MicroZooPlankton(i,iiC),  &
                           n=D3STATE(ppMicroZooPlankton(i,iiN),:), &
                           p=D3STATE(ppMicroZooPlankton(i,iiP),:))
      end do
      do i = 1 , ( iiMesoZooPlankton)
         if ( (ppMesoZooPlankton(i,iiP) > 0) .and. (ppMesoZooPlankton(i,iiN)>0) ) &
            call init_constituents(c=MesoZooPlankton(i,iiC),  &
                           n=D3STATE(ppMesoZooPlankton(i,iiN),:), &
                           p=D3STATE(ppMesoZooPlankton(i,iiP),:))
      end do
   !---------------------------------------------
   ! Check setup settings
   ! and finalize initialization
   !---------------------------------------------
   select case (setup)
      case (0)
      case (1) ! Pelagic only
         LEVEL2 "Pelagic-only setup (bio_setup=1), Switching off the benthic system"
         CalcBenthicFlag = 0
#ifndef BFM_GOTM
         ! force computation of bottom fluxes in the BFM
         AssignPelBenFluxesInBFMFlag = .TRUE.
#endif
#ifdef INCLUDE_BEN
      case (2) ! Benthic only
         LEVEL2 "Benthic-only setup (bio_setup=2), Switching off the pelagic system"
         CalcPelagicFlag = .FALSE.
         CalcPhytoPlankton=.FALSE.
         CalcBacteria=.FALSE.
         CalcMesoZooPlankton=.FALSE.
         CalcMicroZooPlankton=.FALSE.
      case (3) ! Pelagic-Benthic coupling
         LEVEL2 "Pelagic-Benthic coupled setup (bio_setup=3)"
         if (CalcBenthicFlag == 0) &
            LEVEL3 'Warning, benthic system is switched off!'
         if (.NOT.CalcPelagicFlag) &
            LEVEL3 'Warning, pelagic system is switched off!'
#endif
   end select

   !---------------------------------------------
   ! Write defined variables to stdout
   !---------------------------------------------
   if (setup /= 2) then
      LEVEL3 'Pelagic variables:'
      do n=stPelStateS,stPelStateE
         LEVEL4 n,'  ',trim(var_names(n)),'  ',trim(var_units(n)), &
           '  ',trim(var_long(n))
      end do
   endif

#if defined key_obcbfm
  !-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ! All variables are inizialized on obc default
  ! D3STATEOBC(:)=OBCSTATES
  ! Put D3STATEOBC(..)=NOOBCSTATES to exclude
  !-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    D3STATEOBC(:)=OBCSTATES
#endif

   !---------------------------------------------
   ! Zeroing of the switched off state variables
   !---------------------------------------------
   if (.NOT.CalcBacteria) then
      D3STATE(ppB1c,:) = p_small
      D3STATE(ppB1n,:) = p_small
      D3STATE(ppB1p,:) = p_small
      D3STATETYPE(ppB1c) = NOTRANSPORT
#if defined key_obcbfm
      D3STATEOBC(ppB1c) = NOOBCSTATES
#endif
   end if
   do j = 1,iiPhytoPlankton
      if (.NOT.CalcPhytoPlankton(j)) then
         iiLastElement=ppPhytoPlankton(j,0,cmax=1)
         do i = 1,iiLastElement
            D3STATE(ppPhytoPlankton(j,i),:) = p_small
            D3STATETYPE(ppPhytoPlankton(j,i)) = NOTRANSPORT
#if defined key_obcbfm
            D3STATEOBC(ppPhytoPlankton(j,i)) = NOOBCSTATES
#endif
         end do
      end if
   end do
   do j = 1,iiMesoZooPlankton
      if (.NOT.CalcMesoZooPlankton(j)) then
         iiLastElement=ppMesoZooPlankton(j,0,cmax=1)
         do i = 1,iiLastElement
            D3STATE(ppMesoZooPlankton(j,i),:) = p_small
            D3STATETYPE(ppMesoZooPlankton(j,i)) = NOTRANSPORT
#if defined key_obcbfm
            D3STATEOBC(ppMesoZooPlankton(j,i)) = NOOBCSTATES
#endif
         end do
      end if
   end do
   do j = 1,iiMicroZooPlankton
      if (.NOT.CalcMicroZooPlankton(j)) then
         iiLastElement=ppMicroZooPlankton(j,0,cmax=1)
         do i = 1,iiLastElement
            D3STATE(ppMicroZooPlankton(j,i),:) = p_small
            D3STATETYPE(ppMicroZooPlankton(j,i)) = NOTRANSPORT
#if defined key_obcbfm
            D3STATEOBC(ppMicroZooPlankton(j,i)) = NOOBCSTATES
#endif
         end do
      end if
   end do

   if (.NOT.CalcBacteria) then
      B1c = p_small; B1n = p_small; B1p = p_small;
      D3STATETYPE(ppB1c) = NOTRANSPORT
      D3STATETYPE(ppB1n) = NOTRANSPORT
      D3STATETYPE(ppB1p) = NOTRANSPORT
#if defined key_obcbfm
      D3STATEOBC(ppB1c) = NOOBCSTATES
      D3STATEOBC(ppB1n) = NOOBCSTATES
      D3STATEOBC(ppB1p) = NOOBCSTATES
#endif
   end if

#ifdef INCLUDE_BEN
   do j = 1,iiBenOrganisms
      if (.NOT.CalcBenOrganisms(j)) then
         iiLastElement=ppBenOrganisms(j,0,cmax=1)
         do i = 1,iiLastElement
            D2STATE(ppBenOrganisms(j,i),:) = p_small
         end do
      end if
   end do
   do j = 1,iiBenBacteria
      if (.NOT.CalcBenBacteria(j)) then
         iiLastElement=ppBenBacteria(j,0,cmax=1)
         do i = 1,iiLastElement
            D2STATE(ppBenBacteria(j,i),:) = p_small
         end do
      end if
   end do
#endif

   return

99  FATAL 'I could not read bfm_init_nml'
    stop 'init_var_bfm'
100 FATAL 'I could not read bfm_save_nml'
    stop 'init_var_bfm'

   end subroutine init_var_bfm
!EOC

