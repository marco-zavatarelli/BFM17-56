#include"cppdefs.h"


MODULE init_var_bfm_local
   USE global_mem,ONLY: RLEN,ZERO
   IMPLICIT NONE

   real(RLEN) :: nc_ratio_default = 0.0126_RLEN    ! Redfield
   real(RLEN) :: pc_ratio_default = 0.7862e-3_RLEN ! Redfield
   real(RLEN) :: sc_ratio_default = 0.0145_RLEN    ! Redfield
   real(RLEN) :: lc_ratio_default = 0.03_RLEN      ! standard diatom value
   real(RLEN) :: fc_ratio_default = 3.e-04_RLEN    ! standard diatom value
   real(RLEN) :: hc_ratio_default = ZERO           ! standard diatom value

   CONTAINS

%init-func-constituents

END MODULE init_var_bfm_local


!-----------------------------------------------------------------------
!BOP
!
! !ROUTINE: Initialise BFM variables
!
! !INTERFACE:
   subroutine init_var_bfm(namlst,fname,unit,setup)
!
! !DESCRIPTION:
!  Allocate BFM variables and give initial values of
!  parameters and state variables
!  Only pelagic variables are initialized here.
!  Benthic variables are done in a special routine init_benthic_bfm
!
! !USES:
#ifndef NOT_STANDALONE
   use api_bfm
   use global_mem
#endif
#ifdef BFM_GOTM
   use bio_var
   use bio_bfm
   use global_mem, ONLY: RLEN,ZERO,ONE
#endif
   use mem
   use mem_PelGlobal
   use mem_PelChem
   use mem_PelBac
   use mem_MesoZoo
   use mem_MicroZoo
   use mem_Phyto
   use init_var_bfm_local

   use constants, ONLY: HOURS_PER_DAY
   use mem_Param, ONLY: p_small,          &
                        CalcPelagicFlag, &
                        CalcBenthicFlag, &
                        CalcPelChemistry, &
                        CalcTransportFlag

   use mem_Param, ONLY: AssignPelBenFluxesInBFMFlag
   use string_functions, ONLY: getseq_number,empty

   IMPLICIT NONE
!
! !INPUT PARAMETERS:
   integer,          intent(in)        :: namlst
   character(len=*), intent(in)        :: fname
   integer,          intent(in)        :: unit
   integer,          intent(in)        :: setup

!
! !REVISION HISTORY:
!  Original author(s): Marcello Vichi
!
! !LOCAL VARIABLES:
   integer              :: icontrol,i,j,iiLastElement,n,Flun
   integer,parameter    :: NSAVE=120  ! Maximum no variables which can be saved
   character(len=64),dimension(NSAVE):: var_save
   character(len=64),dimension(NSAVE):: ave_save

!-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
! Definition of Initial Pelagic (D3) state variables
!-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

   real(RLEN) :: %3d-state-pel-Initpp

   namelist /bfm_init_nml/ %3d-state-pel-Initpp

   namelist /bfm_init_nml/ surface_flux_method,       &
                           bottom_flux_method,        &
                           n_surface_fluxes, InitVar

   namelist /bfm_save_nml/ var_save, ave_save

! COPYING
!
!   Copyright (C) 2013 BFM System Team (bfm_st@lists.cmcc.it)
!   Copyright (C) 2006 P. Ruardij and Marcello Vichi
!   (rua@nioz.nl, vichi@bo.ingv.it)
!
!   This program is free software; you can redistribute it and/or modify
!   it under the terms of the GNU General Public License as published by
!   the Free Software Foundation;
!   This program is distributed in the hope that it will be useful,
!   but WITHOUT ANY WARRANTY; without even the implied warranty of
!   MERCHANTEABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!   GNU General Public License for more details.
!EOP
!-----------------------------------------------------------------------
!BOC

   LEVEL2 'init_var_bfm'
   !---------------------------------------------
   ! Give zero initial values
   ! Overwritten by namelist parameters
   !---------------------------------------------
   surface_flux_method = -1
   bottom_flux_method = 0
   n_surface_fluxes = 1

   !---------------------------------------------
   ! Pelagic variables
   !---------------------------------------------

%3d-state-pel-InitDefault

   !---------------------------------------------
   ! Initialize the structured array that 
   ! defines if a variable is initialized with 
   ! data. The namelist values override the
   ! assignment
   !---------------------------------------------
   InitVar = InputInfo(0,"dummy.nc","dummy",ZERO,ZERO,ZERO,ZERO,.FALSE.,.FALSE.,.FALSE.)

   !---------------------------------------------
   ! Open and read the namelist
   !---------------------------------------------
   icontrol=0
   open(namlst,file=fname,action='read',status='old',err=98)
   read(namlst,nml=bfm_init_nml,err=99)
   var_save=""
   ave_save=""
   var_ave=.false.
   read(namlst,nml=bfm_save_nml,err=100)
   close(namlst)
   icontrol=1
98 if ( icontrol == 0 ) then
     LEVEL3 'I could not open ',trim(fname)
     LEVEL3 'The initial values of the BFM variables are set to ONE'
     LEVEL3 'If thats not what you want you have to supply ',trim(fname)
   end if

   !---------------------------------------------
   ! Check variable to be saved and
   ! set the corresponding flag value in var_ids
   !---------------------------------------------
   do i=1,NSAVE
      if (.NOT.empty(var_save(i))) then
            j=getseq_number(var_save(i),var_names,stPelState2dE,.TRUE.)
            if ( j > 0 ) var_ids(j)=-1
      end if
      if ( .NOT.empty(var_save(i)) .AND. j==0 ) then
            STDERR 'Warning: variable ',trim(var_save(i)),' does not exist!'
      end if
   end do
   do i=1,NSAVE
      if (.NOT.empty(ave_save(i))) then
         j=getseq_number(ave_save(i),var_names,stPelState2dE,.TRUE.)
         if ( .NOT.empty(ave_save(i)) .AND. j==0 ) then
            STDERR 'Warning: variable ',trim(ave_save(i)),' does not exist!'
         else if ( var_ids(j) <0 ) then
            STDERR 'Warning: Variable ',trim(ave_save(i)), &
               ' is already selected for output in var_save'
         else if ( j > 0 ) then
            var_ids(j) = -1
            var_ave(j) = .true.
            ave_ctl = .true.
         end if
      end if
   end do

#ifdef BFM_GOTM
   !---------------------------------------------
   ! Create pointers
   !---------------------------------------------
    call pointers_gotm_bfm()
#endif

   !---------------------------------------------
   ! Initialize BFM parameters
   !---------------------------------------------
   call Initialize

   !---------------------------------------------
   ! Initially set the number of sun hours
   ! equal to the number of hours in a day.
   !---------------------------------------------
   SUNQ = HOURS_PER_DAY

   !---------------------------------------------
   ! Initialise pelagic state variables
   ! also if using a benthic-only setup
   ! (for boundary conditions)
   !---------------------------------------------

%3d-state-pel-InitSets

      !---------------------------------------------
      ! Initialise other internal components
      ! with Redfield
      !---------------------------------------------
%3d-state-pel-InitInternal

   !---------------------------------------------
   ! Check setup settings
   ! and finalize initialization
   !---------------------------------------------
   select case (setup)
      case (0)
      case (1) ! Pelagic only
         LEVEL2 "Pelagic-only setup (bio_setup=1), Switching off the benthic system"
%value-init-calc-ben 0
#ifdef INCLUDE_BEN
      case (2) ! Benthic only
         LEVEL2 "Benthic-only setup (bio_setup=2), Switching off the pelagic system"
%value-init-calc-pel .FALSE.
      case (3) ! Pelagic-Benthic coupling
         LEVEL2 "Pelagic-Benthic coupled setup (bio_setup=3)"
         if (CalcBenthicFlag == 0) &
            LEVEL3 'Warning, benthic system is switched off!'
         if (.NOT.CalcPelagicFlag) &
            LEVEL3 'Warning, pelagic system is switched off!'
#endif
   end select

#if defined key_obcbfm
  !-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ! All variables are inizialized on obc default
  ! D3STATEOBC(:)=OBCSTATES
  ! Put D3STATEOBC(..)=NOOBCSTATES to exclude
  !-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    D3STATEOBC(:)=OBCSTATES
#endif

   !---------------------------------------------
   ! Check for transport flag
   !---------------------------------------------
#ifdef BFM_STANDALONE
   D3STATETYPE(:) = NOTRANSPORT
#else
   if (.NOT.CalcTransportFlag) D3STATETYPE(:) = NOTRANSPORT
#endif

   !---------------------------------------------
   ! Zeroing of the switched off state variables
   !---------------------------------------------

%3d-state-pel-func-zeroing

   !---------------------------------------------
   ! Write defined variables to stdout
   !---------------------------------------------
#ifdef BFM_PARALLEL
   Flun = LOGUNIT
#else
   Flun = stderr
#endif
   if (setup /= 2) then
      LEVEL3 'Pelagic variables:'
      write(Flun,155) 'ID','Var','Unit','Long Name','Flag'
      do n=stPelStateS,stPelStateE
         write(Flun,156) n,trim(var_names(n)),trim(var_units(n)) &
           ,trim(var_long(n)),D3STATETYPE(n)
      end do
   endif

   return

99  FATAL 'I could not read bfm_init_nml'
    stop 'init_var_bfm'
100 FATAL 'I could not read bfm_save_nml'
    stop 'init_var_bfm'
155 FORMAT(10x,a4,1x,a5,1x,a12,1x,a40,1x,a10)
156 FORMAT(10x,i4,1x,a5,1x,a12,1x,a40,1x,i6)
   end subroutine init_var_bfm
!EOC

